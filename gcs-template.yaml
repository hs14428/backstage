apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: google-cloud-storage-template
  title: GCP Cloud Storage Bucket
  description: WIP - Create a Cloud Storage Bucket in defined project
  tags:
    - gcp
    - storage
spec:
  owner: user:guest
  type: service

  parameters:
    - title: Bucket Name
      required:
        - bucketName
      properties:
        bucketName:
          title: Enter GCS Bucket Name
          type: string
          description: The name of the Bucket. Use only lowercase letters, numbers, hyphens (-), and underscores (_). Dots (.)
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: user:guest
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
    - title: Choose a repo to deploy terraform from via Github Actions
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                  - workflow
            allowedHosts:
              - github.com
    # Project ID
    - title: Project ID
      required:
        - projectId
      properties:
        projectId:
          title: Project ID
          type: string
          description: "Project ID where GCS bucket should be deployed to. For example: backstage-test-123456789."
          ui:options:
            rows: 5
    # Deployment Environment
    - title: Deployment Environment
      required:
        - deploymentEnvironment
      properties:
        deploymentEnvironment:
          title: Deployment Environment
          type: string
          description: The deployment environment, e.g. dev, test, prod
          default: dev
          enum:
            - dev
            - test
            - prod
          enumNames:
            - 'dev'
            - 'test'
            - 'prod'
          ui:options:
            rows: 5
    - title: Location type
      required:
        - locationType
        - deploymentLocation
      properties:
        locationType:
          title: Location type
          type: string
          description: WIP - The location type, e.g. multi-region, dual-region, region
          default: multi-region
          enum:
            - multi-region
            - dual-region
            - region
          enumNames:
            - 'multi-region'
            - 'dual-region'
            - 'region'
          ui:options:
            rows: 5
        deploymentLocation:
          title: Deployment Location
          type: string
          description: The larger deployment location, e.g. europe, us, asia
          default: europe
          enum:
            - europe
            - us
            - asia
          enumNames:
            - 'europe'
            - 'us'
            - 'asia'
          ui:options:
            rows: 5
        deploymentRegion:
          title: Deployment Region
          type: string
          description: The deployment region within larger location, e.g. europe-west2, europe-west3
          default: europe-west2
          enum:
            - europe-west2
            - europe-west3
          enumNames:
            - 'europe-west2'
            - 'europe-west3'
          ui:options:
            rows: 5

  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: only-development-environments
      name: THIS PROCESS ONLY WORKS FOR DEV/TEST
      if: ${{ parameters.deploymentEnvironment == 'prod' }}
      action: debug:log
      input:
        message: "The following steps will fail. This service is only used for dev/test; you have requested deployment to a production environment."

    - id: fetch-base
      name: Fetch Base
      if: ${{ parameters.deploymentEnvironment == 'dev' or parameters.deploymentEnvironment == 'test' }}
      action: fetch:template
      input:
        url: https://github.com/hs14428/backstage/tree/master/gcs
        copyWithoutRender:
          - .github/workflows/*
        values:
          projectId: ${{ parameters.projectId }}
          deploymentRegion: ${{ parameters.deploymentRegion }}
          bucketName: ${{ parameters.bucketName }}
          deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
          deploymentLocation: ${{ parameters.deploymentLocation }}
          repo_name: ${{ (parameters.repoUrl | parseRepoUrl)["repo"] }}
          repo_owner: ${{ (parameters.repoUrl | parseRepoUrl)["owner"] }}
  
    # This step publishes the contents of the working directory to GitHub.
    # Github actions then applys the terraform
    - id: publish
      name: Publish to repo
      if: ${{ parameters.deploymentEnvironment == 'dev' or parameters.deploymentEnvironment == 'test' }}
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.bucketName }}
        repoUrl: ${{ parameters.repoUrl }}
        allowAutoMerge: true
        token: ${{ secrets.USER_OAUTH_TOKEN }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      if: ${{ parameters.deploymentEnvironment == 'dev' or parameters.deploymentEnvironment == 'test' }}
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.projectType }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
